#nullable enable
OpaDotNet.Extensions.AspNetCore.CompiledBundlePolicySource.CompiledBundlePolicySource(Microsoft.Extensions.Options.IOptionsMonitor<OpaDotNet.Extensions.AspNetCore.OpaAuthorizationOptions!>! options, OpaDotNet.Extensions.AspNetCore.IOpaBundleEvaluatorFactoryBuilder! factoryBuilder, Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory) -> void
OpaDotNet.Extensions.AspNetCore.ConfigurationPolicySource.ConfigurationPolicySource(OpaDotNet.Extensions.AspNetCore.IBundleCompiler! compiler, Microsoft.Extensions.Options.IOptionsMonitor<OpaDotNet.Extensions.AspNetCore.OpaAuthorizationOptions!>! authOptions, Microsoft.Extensions.Options.IOptionsMonitor<OpaDotNet.Extensions.AspNetCore.OpaPolicyOptions!>! policy, OpaDotNet.Extensions.AspNetCore.IOpaBundleEvaluatorFactoryBuilder! factoryBuilder, Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory) -> void
OpaDotNet.Extensions.AspNetCore.CoreImportsAbi.CoreImportsAbi(Microsoft.Extensions.Logging.ILogger<OpaDotNet.Extensions.AspNetCore.CoreImportsAbi!>! logger, System.TimeProvider! timeProvider) -> void
OpaDotNet.Extensions.AspNetCore.FileSystemPolicySource.FileSystemPolicySource(OpaDotNet.Extensions.AspNetCore.IBundleCompiler! compiler, Microsoft.Extensions.Options.IOptionsMonitor<OpaDotNet.Extensions.AspNetCore.OpaAuthorizationOptions!>! options, OpaDotNet.Extensions.AspNetCore.IOpaBundleEvaluatorFactoryBuilder! factoryBuilder, Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory) -> void
OpaDotNet.Extensions.AspNetCore.IBundleCompiler
OpaDotNet.Extensions.AspNetCore.IBundleCompiler.Compile(string! source, System.Action<OpaDotNet.Compilation.Abstractions.CompilationParameters!>! configureCompiler, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.IO.Stream?>!
OpaDotNet.Extensions.AspNetCore.IBundleCompiler.Compile(string! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.IO.Stream?>!
OpaDotNet.Extensions.AspNetCore.IBundleCompiler.Compile(System.IO.Stream! source, System.Action<OpaDotNet.Compilation.Abstractions.CompilationParameters!>! configureCompiler, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.IO.Stream?>!
OpaDotNet.Extensions.AspNetCore.IBundleCompiler.Compile(System.IO.Stream! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.IO.Stream?>!
OpaDotNet.Extensions.AspNetCore.IBundleCompiler.Compiler.get -> OpaDotNet.Compilation.Abstractions.IRegoCompiler!
OpaDotNet.Extensions.AspNetCore.IBundleCompiler.CompilerOptions.get -> OpaDotNet.Extensions.AspNetCore.RegoCompilerOptions!
OpaDotNet.Extensions.AspNetCore.IOpaBundleEvaluatorFactoryBuilder
OpaDotNet.Extensions.AspNetCore.IOpaBundleEvaluatorFactoryBuilder.Build(System.IO.Stream! policy) -> OpaDotNet.Wasm.OpaEvaluatorFactory!
OpaDotNet.Extensions.AspNetCore.OpaAuthorizationOptions.Compiler.get -> OpaDotNet.Extensions.AspNetCore.RegoCompilerOptions?
OpaDotNet.Extensions.AspNetCore.OpaAuthorizationOptions.Compiler.set -> void
OpaDotNet.Extensions.AspNetCore.OpaPolicySource.OpaPolicySource(Microsoft.Extensions.Options.IOptionsMonitor<OpaDotNet.Extensions.AspNetCore.OpaAuthorizationOptions!>! options, OpaDotNet.Extensions.AspNetCore.IOpaBundleEvaluatorFactoryBuilder! factoryBuilder, Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory) -> void
OpaDotNet.Extensions.AspNetCore.OpaPolicySource.Options.get -> OpaDotNet.Extensions.AspNetCore.OpaAuthorizationOptions!
OpaDotNet.Extensions.AspNetCore.PathPolicySource.PathPolicySource(Microsoft.Extensions.Options.IOptionsMonitor<OpaDotNet.Extensions.AspNetCore.OpaAuthorizationOptions!>! options, OpaDotNet.Extensions.AspNetCore.IOpaBundleEvaluatorFactoryBuilder! factoryBuilder, Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory) -> void
OpaDotNet.Extensions.AspNetCore.RegoCompilerOptions
OpaDotNet.Extensions.AspNetCore.RegoCompilerOptions.CapabilitiesFilePath.get -> string?
OpaDotNet.Extensions.AspNetCore.RegoCompilerOptions.CapabilitiesFilePath.set -> void
OpaDotNet.Extensions.AspNetCore.RegoCompilerOptions.CapabilitiesVersion.get -> string?
OpaDotNet.Extensions.AspNetCore.RegoCompilerOptions.CapabilitiesVersion.set -> void
OpaDotNet.Extensions.AspNetCore.RegoCompilerOptions.Debug.get -> bool
OpaDotNet.Extensions.AspNetCore.RegoCompilerOptions.Debug.set -> void
OpaDotNet.Extensions.AspNetCore.RegoCompilerOptions.DisablePrintStatements.get -> bool
OpaDotNet.Extensions.AspNetCore.RegoCompilerOptions.DisablePrintStatements.set -> void
OpaDotNet.Extensions.AspNetCore.RegoCompilerOptions.Entrypoints.get -> System.Collections.Generic.IReadOnlySet<string!>?
OpaDotNet.Extensions.AspNetCore.RegoCompilerOptions.Entrypoints.set -> void
OpaDotNet.Extensions.AspNetCore.RegoCompilerOptions.FollowSymlinks.get -> bool
OpaDotNet.Extensions.AspNetCore.RegoCompilerOptions.FollowSymlinks.set -> void
OpaDotNet.Extensions.AspNetCore.RegoCompilerOptions.ForceBundleWriter.get -> bool
OpaDotNet.Extensions.AspNetCore.RegoCompilerOptions.ForceBundleWriter.set -> void
OpaDotNet.Extensions.AspNetCore.RegoCompilerOptions.Ignore.get -> System.Collections.Generic.IReadOnlySet<string!>!
OpaDotNet.Extensions.AspNetCore.RegoCompilerOptions.Ignore.set -> void
OpaDotNet.Extensions.AspNetCore.RegoCompilerOptions.OutputPath.get -> string?
OpaDotNet.Extensions.AspNetCore.RegoCompilerOptions.OutputPath.set -> void
OpaDotNet.Extensions.AspNetCore.RegoCompilerOptions.PruneUnused.get -> bool
OpaDotNet.Extensions.AspNetCore.RegoCompilerOptions.PruneUnused.set -> void
OpaDotNet.Extensions.AspNetCore.RegoCompilerOptions.RegoVersion.get -> OpaDotNet.Compilation.Abstractions.RegoVersion
OpaDotNet.Extensions.AspNetCore.RegoCompilerOptions.RegoVersion.set -> void
override OpaDotNet.Extensions.AspNetCore.CoreImportsAbi.Now() -> System.DateTimeOffset
static OpaDotNet.Extensions.AspNetCore.ServiceCollectionExtensions.AddCustomBuiltins<T>(this OpaDotNet.Extensions.AspNetCore.IOpaAuthorizationBuilder! builder) -> OpaDotNet.Extensions.AspNetCore.IOpaAuthorizationBuilder!
static OpaDotNet.Extensions.AspNetCore.ServiceCollectionExtensions.AddCustomBuiltins<TBuiltins, TCapabilities>(this OpaDotNet.Extensions.AspNetCore.IOpaAuthorizationBuilder! builder) -> OpaDotNet.Extensions.AspNetCore.IOpaAuthorizationBuilder!
