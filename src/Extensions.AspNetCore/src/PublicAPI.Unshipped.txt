#nullable enable
OpaDotNet.Extensions.AspNetCore.CompiledBundlePolicySource.CompiledBundlePolicySource(Microsoft.Extensions.Options.IOptions<OpaDotNet.Extensions.AspNetCore.OpaAuthorizationOptions!>! options, OpaDotNet.Extensions.AspNetCore.IOpaImportsAbiFactory! importsAbiFactory, Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory) -> void
OpaDotNet.Extensions.AspNetCore.ConfigurationPolicySource.ConfigurationPolicySource(OpaDotNet.Extensions.AspNetCore.IBundleCompiler! compiler, Microsoft.Extensions.Options.IOptions<OpaDotNet.Extensions.AspNetCore.OpaAuthorizationOptions!>! authOptions, Microsoft.Extensions.Options.IOptionsMonitor<OpaDotNet.Extensions.AspNetCore.OpaPolicyOptions!>! policy, OpaDotNet.Extensions.AspNetCore.IOpaImportsAbiFactory! importsAbiFactory, Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory) -> void
OpaDotNet.Extensions.AspNetCore.FileSystemPolicySource.FileSystemPolicySource(OpaDotNet.Extensions.AspNetCore.IBundleCompiler! compiler, Microsoft.Extensions.Options.IOptions<OpaDotNet.Extensions.AspNetCore.OpaAuthorizationOptions!>! options, OpaDotNet.Extensions.AspNetCore.IOpaImportsAbiFactory! importsAbiFactory, Microsoft.Extensions.Options.IOptions<OpaDotNet.Compilation.Abstractions.RegoCompilerOptions!>! compilerOptions, Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory) -> void
OpaDotNet.Extensions.AspNetCore.IBundleCompiler
OpaDotNet.Extensions.AspNetCore.IBundleCompiler.Compile(string! source, System.Func<OpaDotNet.Compilation.Abstractions.CompilationParameters!, OpaDotNet.Compilation.Abstractions.CompilationParameters!>! configureCompiler, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.IO.Stream?>!
OpaDotNet.Extensions.AspNetCore.IBundleCompiler.Compile(string! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.IO.Stream?>!
OpaDotNet.Extensions.AspNetCore.IBundleCompiler.Compile(System.IO.Stream! source, System.Func<OpaDotNet.Compilation.Abstractions.CompilationParameters!, OpaDotNet.Compilation.Abstractions.CompilationParameters!>! configureCompiler, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.IO.Stream?>!
OpaDotNet.Extensions.AspNetCore.IBundleCompiler.Compile(System.IO.Stream! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.IO.Stream?>!
OpaDotNet.Extensions.AspNetCore.IBundleCompiler.Compiler.get -> OpaDotNet.Compilation.Abstractions.IRegoCompiler!
OpaDotNet.Extensions.AspNetCore.OpaAuthorizationOptions.CapabilitiesFilePath.get -> string?
OpaDotNet.Extensions.AspNetCore.OpaAuthorizationOptions.CapabilitiesFilePath.set -> void
OpaDotNet.Extensions.AspNetCore.OpaPolicySource.OpaPolicySource(Microsoft.Extensions.Options.IOptions<OpaDotNet.Extensions.AspNetCore.OpaAuthorizationOptions!>! options, OpaDotNet.Extensions.AspNetCore.IOpaImportsAbiFactory! importsAbiFactory, Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory) -> void
OpaDotNet.Extensions.AspNetCore.PathPolicySource.PathPolicySource(Microsoft.Extensions.Options.IOptions<OpaDotNet.Extensions.AspNetCore.OpaAuthorizationOptions!>! options, OpaDotNet.Extensions.AspNetCore.IOpaImportsAbiFactory! importsAbiFactory, Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory) -> void
